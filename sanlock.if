<<<<<<< HEAD

## <summary>policy for sanlock</summary>
=======
## <summary>shared storage lock manager.</summary>
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a

########################################
## <summary>
##	Execute a domain transition to run sanlock.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed access.
## </summary>
## </param>
#
interface(`sanlock_domtrans',`
	gen_require(`
		type sanlock_t, sanlock_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, sanlock_exec_t, sanlock_t)
')


########################################
## <summary>
##	Execute sanlock init scripts in
##	the initrc domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`sanlock_initrc_domtrans',`
	gen_require(`
		type sanlock_initrc_exec_t;
	')

	init_labeled_script_domtrans($1, sanlock_initrc_exec_t)
')

######################################
## <summary>
##	Create, read, write, and delete
##	sanlock pid files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`sanlock_manage_pid_files',`
	gen_require(`
		type sanlock_var_run_t;
	')

	files_search_pids($1)
	manage_files_pattern($1, sanlock_var_run_t, sanlock_var_run_t)
')

########################################
## <summary>
<<<<<<< HEAD
##      Connect to sanlock over a unix stream socket.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`sanlock_stream_connect',`
        gen_require(`
                type sanlock_t, sanlock_var_run_t;
        ')

        files_search_pids($1)
        stream_connect_pattern($1, sanlock_var_run_t, sanlock_var_run_t, sanlock_t)
')

########################################
## <summary>
##	Execute virt server in the virt domain.
=======
##	Connect to sanlock with a unix
##	domain stream socket.
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`sanlock_systemctl',`
	gen_require(`
		type sanlock_unit_file_t;
		type sanlock_t;
	')

	systemd_exec_systemctl($1)
	allow $1 sanlock_unit_file_t:file read_file_perms;
	allow $1 sanlock_unit_file_t:service manage_service_perms;

	ps_process_pattern($1, sanlock_t)
')

########################################
## <summary>
##	All of the rules required to
##	administrate an sanlock environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`sanlock_admin',`
	gen_require(`
<<<<<<< HEAD
		type sanlock_t;
		type sanlock_initrc_exec_t;
		type sanlock_unit_file_t;
=======
		type sanlock_t, sanlock_initrc_exec_t, sanlock_var_run_t;
		type sanlock_log_t;
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a
	')

	allow $1 sanlock_t:process { ptrace signal_perms };
	ps_process_pattern($1, sanlock_t)
	tunable_policy(`deny_ptrace',`',`
		allow $1 sanlock_t:process ptrace;
	')

	sanlock_initrc_domtrans($1)
	domain_system_change_exemption($1)
	role_transition $2 sanlock_initrc_exec_t system_r;
	allow $2 system_r;

<<<<<<< HEAD
	virt_systemctl($1)
	admin_pattern($1, sanlock_unit_file_t)
	allow $1 sanlock_unit_file_t:service all_service_perms;
=======
	files_search_pids($1)
	admin_pattern($1, sanlock_var_run_t)

	logging_search_logs($1)
	admin_pattern($1, sanlock_log_t)
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a
')

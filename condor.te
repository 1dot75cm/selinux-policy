policy_module(condor, 1.0.0)

########################################
#
# Declarations
#

## <desc>
##  <p>
##  Allow codnor domain to connect to the network using TCP.
##  </p>
## </desc>
gen_tunable(condor_domain_can_network_connect, false)

attribute condor_domain;

type condor_master_t, condor_domain;
type condor_master_exec_t;
init_daemon_domain(condor_master_t, condor_master_exec_t)

condor_domain_template(collector)
condor_domain_template(negotiator)
condor_domain_template(schedd)
condor_domain_template(startd)
condor_domain_template(procd)

type condor_schedd_tmp_t;
files_tmp_file(condor_schedd_tmp_t)

type condor_startd_tmp_t;
files_tmp_file(condor_startd_tmp_t)

type condor_startd_tmpfs_t;
files_tmpfs_file(condor_startd_tmpfs_t)

type condor_log_t;
logging_log_file(condor_log_t)

type condor_var_lib_t;
files_type(condor_var_lib_t)

type condor_var_lock_t;
files_lock_file(condor_var_lock_t)

type condor_var_run_t;
files_pid_file(condor_var_run_t)

type condor_unit_file_t;
systemd_unit_file(condor_unit_file_t)

########################################
#
# condor domain local policy
#

allow condor_domain self:process signal_perms;
allow condor_domain self:fifo_file rw_fifo_file_perms;

allow condor_domain self:tcp_socket create_stream_socket_perms;
allow condor_domain self:udp_socket create_socket_perms;
allow condor_domain self:unix_stream_socket create_stream_socket_perms;

allow condor_domain condor_master_t:process signull;
allow condor_domain condor_master_t:tcp_socket getattr;

manage_dirs_pattern(condor_domain, condor_log_t, condor_log_t)
manage_files_pattern(condor_domain, condor_log_t, condor_log_t)
logging_log_filetrans(condor_domain, condor_log_t, { dir file })

manage_dirs_pattern(condor_domain, condor_var_lib_t, condor_var_lib_t)
manage_files_pattern(condor_domain, condor_var_lib_t, condor_var_lib_t)
files_var_lib_filetrans(condor_domain, condor_var_lib_t, { dir file })

manage_files_pattern(condor_domain, condor_var_lock_t, condor_var_lock_t)
files_lock_filetrans(condor_domain, condor_var_lock_t, file)

manage_dirs_pattern(condor_domain, condor_var_run_t, condor_var_run_t)
manage_files_pattern(condor_domain, condor_var_run_t, condor_var_run_t)
manage_fifo_files_pattern(condor_domain, condor_var_run_t, condor_var_run_t)
files_pid_filetrans(condor_domain, condor_var_run_t, { dir file fifo_file })

kernel_read_system_state(condor_domain)
kernel_read_network_state(condor_domain)

corecmd_exec_bin(condor_domain)
corecmd_exec_shell(condor_domain)

corenet_tcp_connect_condor_port(condor_domain)
corenet_tcp_connect_all_ephemeral_ports(condor_domain)

domain_use_interactive_fds(condor_domain)

dev_read_rand(condor_domain)
dev_read_urand(condor_domain)
dev_read_sysfs(condor_domain)

files_read_etc_files(condor_domain)

logging_send_syslog_msg(condor_domain)

miscfiles_read_localization(condor_domain)

tunable_policy(`condor_domain_can_network_connect',`
    corenet_tcp_connect_all_ports(condor_domain)
')

optional_policy(`
	rhcs_stream_connect_cluster(condor_domain)
')

optional_policy(`
    sysnet_dns_name_resolve(condor_domain)
')

#####################################
#
# condor master local policy
#

allow condor_master_t self:capability { setuid setgid dac_override sys_ptrace };

allow condor_master_t condor_domain:process signal;

corenet_tcp_bind_condor_port(condor_master_t)
corenet_udp_bind_condor_port(condor_master_t)

domain_read_all_domains_state(condor_master_t)

auth_use_nsswitch(condor_master_t)

######################################
#
# condor collector local policy
#

allow condor_collector_t self:capability { setuid setgid };

allow condor_collector_t condor_master_t:tcp_socket rw_stream_socket_perms;
allow condor_collector_t condor_master_t:udp_socket rw_socket_perms;

kernel_read_network_state(condor_collector_t)

auth_use_nsswitch(condor_collector_t)

#####################################
#
# condor negotiator local policy
#
allow condor_negotiator_t self:capability { setuid setgid };
allow condor_negotiator_t condor_master_t:tcp_socket rw_stream_socket_perms;
allow condor_negotiator_t condor_master_t:udp_socket getattr;

corenet_tcp_connect_all_ephemeral_ports(condor_negotiator_t)

auth_use_nsswitch(condor_negotiator_t)

######################################
#
# condor procd local policy
#

allow condor_procd_t self:capability { fowner chown dac_override sys_ptrace };

domain_read_all_domains_state(condor_procd_t)

#######################################
#
# condor schedd local policy
#

domtrans_pattern(condor_schedd_t, condor_procd_exec_t, condor_procd_t)
domtrans_pattern(condor_schedd_t, condor_startd_exec_t, condor_startd_t)

# dac_override because of /var/log/condor
allow condor_schedd_t self:capability { setuid chown setgid dac_override };
allow condor_schedd_t condor_master_t:tcp_socket rw_stream_socket_perms;
allow condor_schedd_t condor_master_t:udp_socket getattr;

allow condor_schedd_t condor_var_lock_t:dir manage_file_perms;

manage_dirs_pattern(condor_schedd_t, condor_schedd_tmp_t, condor_schedd_tmp_t)
manage_files_pattern(condor_schedd_t, condor_schedd_tmp_t, condor_schedd_tmp_t)
files_tmp_filetrans(condor_schedd_t, condor_schedd_tmp_t, { file dir })
allow condor_schedd_t condor_schedd_tmp_t:file { relabelfrom relabelto };

kernel_read_kernel_sysctls(condor_schedd_t)

corenet_tcp_connect_all_ephemeral_ports(condor_schedd_t)

auth_use_nsswitch(condor_schedd_t)

#####################################
#
# condor startd local policy
#

# also needed by java
allow condor_startd_t self:capability { setuid net_admin setgid dac_override };
allow condor_startd_t self:process execmem;

manage_dirs_pattern(condor_startd_t, condor_startd_tmp_t, condor_startd_tmp_t)
manage_files_pattern(condor_startd_t, condor_startd_tmp_t, condor_startd_tmp_t)
files_tmp_filetrans(condor_startd_t, condor_startd_tmp_t, { file dir })
allow condor_startd_t condor_startd_tmp_t:file { relabelfrom relabelto };

manage_dirs_pattern(condor_startd_t, condor_startd_tmpfs_t, condor_startd_tmpfs_t)
manage_files_pattern(condor_startd_t, condor_startd_tmpfs_t, condor_startd_tmpfs_t)
fs_tmpfs_filetrans(condor_startd_t, condor_startd_tmpfs_t, { dir file })

can_exec(condor_startd_t, condor_startd_exec_t)

kernel_read_kernel_sysctls(condor_startd_t)

domain_read_all_domains_state(condor_startd_t)

auth_use_nsswitch(condor_startd_t)

init_domtrans_script(condor_startd_t)
init_initrc_domain(condor_startd_t)

libs_exec_lib_files(condor_startd_t)

files_read_usr_files(condor_startd_t)

optional_policy(`
	ssh_basic_client_template(condor_startd, condor_startd_t, system_r)
	ssh_domtrans(condor_startd_t)

	manage_files_pattern(condor_startd_ssh_t, condor_var_lib_t, condor_var_lib_t)
	manage_dirs_pattern(condor_startd_ssh_t, condor_var_lib_t, condor_var_lib_t)

	optional_policy(`
		kerberos_use(condor_startd_ssh_t)
	')
')

optional_policy(`
	unconfined_domain(condor_startd_t)
')

## <summary>Execute a command with a substitute user</summary>

#######################################
## <summary>
##	The role template for the sudo module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to change the linux user id, to run commands as a different
##	user.
##	</p>
## </desc>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user role (e.g., user
##	is the prefix for user_r).
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The user role.
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The user domain associated with the role.
##	</summary>
## </param>
#
template(`sudo_role_template',`

	gen_require(`
		type sudo_exec_t;
		type sudo_db_t;
		attribute sudodomain;
	')

	##############################
	#
	# Declarations
	#

	type $1_sudo_t, sudodomain; 
	userdom_user_application_domain($1_sudo_t, sudo_exec_t)
	domain_interactive_fd($1_sudo_t)
	domain_role_change_exemption($1_sudo_t)
	role $2 types $1_sudo_t;
	userdom_home_manager($1_sudo_t)

	type $1_sudo_tmp_t;
	files_tmp_file($1_sudo_tmp_t)

	allow $1_sudo_t $1_sudo_tmp_t:file manage_file_perms;
	files_tmp_filetrans($1_sudo_t, $1_sudo_tmp_t, file)

	allow $1_sudo_t $3:key search;

	# Enter this derived domain from the user domain
	domtrans_pattern($3, sudo_exec_t, $1_sudo_t)

	# By default, revert to the calling domain when a shell is executed.
	corecmd_shell_domtrans($1_sudo_t, $3)
	corecmd_bin_domtrans($1_sudo_t, $3)
	userdom_domtrans_user_home($1_sudo_t, $3)
	userdom_domtrans_user_tmp($1_sudo_t, $3)
	domain_entry_file($3, sudo_exec_t)
	domain_auto_transition_pattern($1_sudo_t, sudo_exec_t, $3)

	allow $3 $1_sudo_t:fd use;
	allow $3 $1_sudo_t:fifo_file rw_fifo_file_perms;
	allow $3 $1_sudo_t:process signal_perms;

	auth_run_chk_passwd($1_sudo_t, $2)
	auth_use_nsswitch($1_sudo_t)

<<<<<<< HEAD
=======
	init_rw_utmp($1_sudo_t)

	logging_send_audit_msgs($1_sudo_t)
	logging_send_syslog_msg($1_sudo_t)

	miscfiles_read_localization($1_sudo_t)

	seutil_search_default_contexts($1_sudo_t)
	seutil_libselinux_linked($1_sudo_t)

	userdom_spec_domtrans_all_users($1_sudo_t)
	userdom_create_all_users_keys($1_sudo_t)
	userdom_manage_user_home_content_files($1_sudo_t)
	userdom_manage_user_home_content_symlinks($1_sudo_t)
	userdom_manage_user_tmp_files($1_sudo_t)
	userdom_manage_user_tmp_symlinks($1_sudo_t)
	userdom_use_user_terminals($1_sudo_t)
	# for some PAM modules and for cwd
	userdom_dontaudit_search_user_home_content($1_sudo_t)
	userdom_dontaudit_search_user_home_dirs($1_sudo_t)

	ifdef(`hide_broken_symptoms', `
		dontaudit $1_sudo_t $3:socket_class_set { read write };
	')

	tunable_policy(`use_nfs_home_dirs',`
		fs_manage_nfs_files($1_sudo_t)
	')

	tunable_policy(`use_samba_home_dirs',`
		fs_manage_cifs_files($1_sudo_t)
	')

>>>>>>> f825edc28a6c8a75a42a889a780a83dcec2fa9e1
	optional_policy(`
		mta_role($2, $1_sudo_t)
	')

	optional_policy(`
    	kerberos_manage_host_rcache($1_sudo_t)
    	kerberos_read_config($1_sudo_t)
	')

')

########################################
## <summary>
##	Send a SIGCHLD signal to the sudo domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`sudo_sigchld',`
	gen_require(`
		attribute sudodomain;
	')

	allow $1 sudodomain:process sigchld;
')

#######################################
## <summary>
##  Allow execute sudo in called domain.
##  This interfaces is added for nova-stack policy.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`sudo_exec',`
    gen_require(`
        type sudo_exec_t;
    ')

	can_exec($1, sudo_exec_t)
')

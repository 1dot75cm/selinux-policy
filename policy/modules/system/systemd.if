## <summary>SELinux policy for systemd components</summary>

#######################################
## <summary>
##      Create a domain for processes which are started 
##      exuting systemctl.
## </summary>
## <param name="domain_prefix">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_systemctl_domain',`
        gen_require(`
                type systemd_systemctl_exec_t;
                role system_r;
		attribute systemctl_domain;
        ')

	type $1_systemctl_t, systemctl_domain;
	domain_type($1_systemctl_t)
	domain_entry_file($1_systemctl_t, systemd_systemctl_exec_t)	

	role system_r types $1_systemctl_t;

	domtrans_pattern($1_t, systemd_systemctl_exec_t , $1_systemctl_t)
')

########################################
## <summary>
##      Execute systemctl in the caller domain.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_exec_systemctl',`
        gen_require(`
                type systemd_systemctl_exec_t;
        ')

	corecmd_search_bin($1)
	can_exec($1, systemd_systemctl_exec_t)

	fs_list_cgroup_dirs($1)
	fs_read_cgroup_files($1)
	systemd_list_unit_dirs($1)
	init_list_pid_dirs($1)
	init_read_state($1)
	init_stream_send($1)
	init_stream_connect($1)

	systemd_login_list_pid_dirs($1)
	systemd_login_read_pid_files($1)
	systemd_passwd_agent_exec($1)
')

#######################################
## <summary>
##      Create a file type used for systemd unit files.
## </summary>
## <param name="script_file">
##      <summary>
##      Type to be used for an unit file.
##      </summary>
## </param>
#
interface(`systemd_unit_file',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')

        typeattribute $1 systemd_unit_file_type;
	files_type($1)
')

######################################
## <summary>
##      Allow domain to search systemd unit dirs.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_search_unit_dirs',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')
	
	files_search_var_lib($1)
	allow $1 systemd_unit_file_type:dir search_dir_perms;
')

######################################
## <summary>
##      Allow domain to list systemd unit dirs.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_list_unit_dirs',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')
	
	files_search_var_lib($1)
	allow $1 systemd_unit_file_type:dir list_dir_perms;
')

#####################################
## <summary>
##      Allow domain to getattr all systemd unit files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_getattr_unit_files',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')

    files_search_var_lib($1)
    allow $1 systemd_unit_file_type:file getattr_file_perms;
')

######################################
## <summary>
##      Allow domain to read all systemd unit files.
## </summary>
## <param name="domain">
##      <summary>
##      Domain allowed access.
##      </summary>
## </param>
#
interface(`systemd_read_unit_files',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')
	
	files_search_var_lib($1)
	allow $1 systemd_unit_file_type:file read_file_perms;
	allow $1 systemd_unit_file_type:lnk_file read_lnk_file_perms;
	allow $1 systemd_unit_file_type:dir list_dir_perms;
')

#####################################
## <summary>
##      Dontaudit domain to read all systemd unit files.
## </summary>
## <param name="domain">
##      <summary>
##	Domain to not audit.
##      </summary>
## </param>
#
interface(`systemd_dontaudit_read_unit_files',`
        gen_require(`
                attribute systemd_unit_file_type;
        ')

        dontaudit $1 systemd_unit_file_type:file read_file_perms;
')

######################################
## <summary>
##	Read systemd_login PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_read_pid_files',`
	gen_require(`
		type systemd_logind_var_run_t;
	')

	files_search_pids($1)
	read_files_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

######################################
## <summary>
##	Read systemd_login PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_list_pid_dirs',`
	gen_require(`
		type systemd_logind_var_run_t;
	')

	files_search_pids($1)
	list_dirs_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

######################################
## <summary>
##	Use and and inherited systemd
##	logind file descriptors.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_use_fds_logind',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:fd use;
')

######################################
## <summary>
##	Read logind sessions files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_read_logind_sessions_files',`
	gen_require(`
		type systemd_logind_sessions_t;
	')

	init_search_pid_dirs($1)
	allow $1 systemd_logind_sessions_t:dir list_dir_perms;
	read_files_pattern($1, systemd_logind_sessions_t, systemd_logind_sessions_t)
')

######################################
## <summary>
##	Write inherited logind sessions pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_write_inherited_logind_sessions_pipes',`
	gen_require(`
		type systemd_logind_sessions_t;
	')

	allow $1 systemd_logind_sessions_t:fifo_file write;
')

######################################
## <summary>
##	Write systemd inhibit pipes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_write_inhibit_pipes',`
	gen_require(`
		type systemd_logind_inhibit_var_run_t;
	')

	allow $1 systemd_logind_inhibit_var_run_t:fifo_file write;
')

########################################
## <summary>
##	Send and receive messages from
##	systemd logind over dbus.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_dbus_chat_logind',`
	gen_require(`
		type systemd_logind_t;
		class dbus send_msg;
	')

	allow $1 systemd_logind_t:dbus send_msg;
	allow systemd_logind_t $1:dbus send_msg;
	ps_process_pattern(systemd_logind_t, $1)
	allow systemd_logind_t $1:process signal;
')

#######################################
## <summary>
##  Execute a domain transition to run systemd-tmpfiles.
## </summary>
## <param name="domain">
## <summary>
##  Domain allowed access.
## </summary>
## </param>
#
interface(`systemd_tmpfiles_domtrans',`
    gen_require(`
        type systemd_tmpfiles_t, systemd_tmpfiles_exec_t;
    ')

    domtrans_pattern($1, systemd_tmpfiles_exec_t, systemd_tmpfiles_t)
')

########################################
## <summary>
##	Execute a domain transition to run systemd-tty-ask-password-agent.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed access.
## </summary>
## </param>
#
interface(`systemd_passwd_agent_domtrans',`
	gen_require(`
		type systemd_passwd_agent_t, systemd_passwd_agent_exec_t;
	')

	domtrans_pattern($1, systemd_passwd_agent_exec_t, systemd_passwd_agent_t)
')

#######################################
## <summary>
##  Execute systemd-tty-ask-password-agent in the caller domain
## </summary>
## <param name="domain">
## <summary>
##  Domain allowed access.
## </summary>
## </param>
#
interface(`systemd_passwd_agent_exec',`
	gen_require(`
		type systemd_passwd_agent_t, systemd_passwd_agent_exec_t;
	')

	can_exec($1, systemd_passwd_agent_exec_t)
	systemd_manage_passwd_run($1)
')

########################################
## <summary>
##	Execute a domain transition to run systemd_notify.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed access.
## </summary>
## </param>
#
interface(`systemd_notify_domtrans',`
	gen_require(`
		type systemd_notify_t, systemd_notify_exec_t;
	')

	domtrans_pattern($1, systemd_notify_exec_t, systemd_notify_t)
')

########################################
## <summary>
##	Execute systemd-tty-ask-password-agent in the systemd_passwd_agent domain, and
##	allow the specified role the systemd_passwd_agent domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed the systemd_passwd_agent domain.
##	</summary>
## </param>
#
interface(`systemd_passwd_agent_run',`
	gen_require(`
		type systemd_passwd_agent_t;
	')

	systemd_passwd_agent_domtrans($1)
	role $2 types systemd_passwd_agent_t;
')

########################################
## <summary>
##	Role access for systemd_passwd_agent
## </summary>
## <param name="role">
##	<summary>
##	Role allowed access
##	</summary>
## </param>
## <param name="domain">
##	<summary>
##	User domain for the role
##	</summary>
## </param>
#
interface(`systemd_passwd_agent_role',`
	gen_require(`
              type systemd_passwd_agent_t;
	')

	role $1 types systemd_passwd_agent_t;

	systemd_passwd_agent_domtrans($2)

	ps_process_pattern($2, systemd_passwd_agent_t)
	allow $2 systemd_passwd_agent_t:process signal;
')

########################################
## <summary>
##	Send generic signals to systemd_passwd_agent processes.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_signal_passwd_agent',`
	gen_require(`
              type systemd_passwd_agent_t;
	')

	allow $1 systemd_passwd_agent_t:process signal;
')

######################################
## <summary>
##  Allow to domain to read systemd-passwd pipe
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`systemd_read_fifo_file_passwd_run',`
    gen_require(`
        type systemd_passwd_var_run_t;
    ')

    init_search_pid_dirs($1)
    read_sock_files_pattern($1, systemd_passwd_var_run_t, systemd_passwd_var_run_t)
')

#######################################
## <summary>
##  Send generic signals to systemd_passwd_agent processes.
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`systemd_manage_passwd_run',`
	gen_require(`
		type systemd_passwd_agent_t;	
		type systemd_passwd_var_run_t;
	')

	init_search_pid_dirs($1)
	manage_fifo_files_pattern($1, systemd_passwd_var_run_t, systemd_passwd_var_run_t)

	allow systemd_passwd_agent_t $1:process signull;
	allow systemd_passwd_agent_t $1:unix_dgram_socket sendto;
')

######################################
## <summary>
##  Template for temporary sockets and files in /dev/.systemd/ask-password
##  which are used by systemd-passwd-agent
## </summary>
## <param name="userdomain_prefix">
##  <summary>
##  The prefix of the domain (e.g., user
##  is the prefix for user_t).
##  </summary>
## </param>
#
interface(`systemd_passwd_agent_dev_template',`
        gen_require(`
                type systemd_passwd_agent_t;
        ')

	type systemd_$1_device_t;
        files_type(systemd_$1_device_t)
        dev_associate(systemd_$1_device_t)

	dev_filetrans($1_t, systemd_$1_device_t, { file sock_file })
	init_pid_filetrans($1_t, systemd_$1_device_t, { file sock_file })
        allow $1_t systemd_$1_device_t:file manage_file_perms;
        allow $1_t systemd_$1_device_t:sock_file manage_sock_file_perms;

	allow systemd_passwd_agent_t $1_t:process signull;
        allow systemd_passwd_agent_t $1_t:unix_dgram_socket sendto;
	allow systemd_passwd_agent_t systemd_$1_device_t:sock_file write;
        allow systemd_passwd_agent_t systemd_$1_device_t:file read_file_perms;
')

########################################
## <summary>
##	Allow the specified domain to connect to
##	systemd_logger with a unix socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_logger_stream_connect',`
	gen_require(`
		type systemd_logger_t;
	')

	allow $1 systemd_logger_t:unix_stream_socket connectto;
')

########################################
## <summary>
##	manage systemd unit dirs
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_manage_unit_dirs',`
	gen_require(`
		attribute systemd_unit_file_type;
	')

	manage_dirs_pattern($1, systemd_unit_file_type, systemd_unit_file_type)
')

########################################
## <summary>
##	manage all systemd unit files
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_manage_all_unit_files',`
	gen_require(`
		attribute systemd_unit_file_type;
	')

	manage_files_pattern($1, systemd_unit_file_type, systemd_unit_file_type)
	manage_lnk_files_pattern($1, systemd_unit_file_type, systemd_unit_file_type)
')

########################################
## <summary>
##	manage all systemd unit lnk_files
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_manage_all_unit_lnk_files',`
	gen_require(`
		attribute systemd_unit_file_type;
	')

	manage_lnk_files_pattern($1, systemd_unit_file_type, systemd_unit_file_type)
')


########################################
## <summary>
##	Allow the specified domain to modify the systemd configuration of 
##	all systemd services
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_config_all_services',`
	gen_require(`
		attribute systemd_unit_file_type;
	')

	allow $1 systemd_unit_file_type:service all_service_perms;
	init_config_all_script_files($1)
')


########################################
## <summary>
##	Transition to systemd named content
## </summary>
## <param name="domain">
##	<summary>
##      Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_filetrans_named_content',`
	gen_require(`
		type systemd_passwd_var_run_t;
		type systemd_logind_var_run_t;
	')

	files_pid_filetrans($1, systemd_logind_var_run_t, file, "nologin")
	init_named_pid_filetrans($1, systemd_passwd_var_run_t, dir, "ask-password-block")
	init_named_pid_filetrans($1, systemd_passwd_var_run_t, dir, "ask-password")
')

########################################
## <summary>
##	Get the system status information from systemd_login
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_status',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:system status;
')

########################################
## <summary>
##	Send systemd_login a null signal.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_signull',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:process signull;
')

########################################
## <summary>
##	Tell systemd_login to reboot the system.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_reboot',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:system reboot;
')

########################################
## <summary>
##	Tell systemd_login to halt the system.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_halt',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:system halt;
')

########################################
## <summary>
##	Tell systemd_login to do an unknown access.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_login_undefined',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:system undefined;
')


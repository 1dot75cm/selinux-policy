.TH  "anaconda_selinux"  "8"  "13-01-16" "anaconda" "SELinux Policy documentation for anaconda"
.SH "NAME"
anaconda_selinux \- Security Enhanced Linux Policy for the anaconda processes
.SH "DESCRIPTION"

Security-Enhanced Linux secures the anaconda processes via flexible mandatory access control.

The anaconda processes execute with the anaconda_t SELinux type. You can check if you have these processes running by executing the \fBps\fP command with the \fB\-Z\fP qualifier.

For example:

.B ps -eZ | grep anaconda_t


.SH "ENTRYPOINTS"

The anaconda_t SELinux type can be entered via the \fBsysctl_type, anaconda_exec_t, filesystem_type, mtrr_device_t, unlabeled_t, proc_type, file_type\fP file types.

The default entrypoint paths for the anaconda_t domain are the following:

/dev/cpu/mtrr, all files on the system
.SH PROCESS TYPES
SELinux defines process types (domains) for each process running on the system
.PP
You can see the context of a process using the \fB\-Z\fP option to \fBps\bP
.PP
Policy governs the access confined processes have to files.
SELinux anaconda policy is very flexible allowing users to setup their anaconda processes in as secure a method as possible.
.PP
The following process types are defined for anaconda:

.EX
.B anaconda_t
.EE
.PP
Note:
.B semanage permissive -a anaconda_t
can be used to make the process type anaconda_t permissive. SELinux does not deny access to permissive process types, but the AVC (SELinux denials) messages are still generated.

.SH BOOLEANS
SELinux policy is customizable based on least access required.  anaconda policy is extremely flexible and has several booleans that allow you to manipulate the policy and run anaconda with the tightest access possible.


.PP
If you want to deny user domains applications to map a memory region as both executable and writable, this is dangerous and the executable should be reported in bugzilla, you must turn on the deny_execmem boolean. Enabled by default.

.EX
.B setsebool -P deny_execmem 1

.EE

.PP
If you want to allow sysadm to debug or ptrace all processes, you must turn on the deny_ptrace boolean. Enabled by default.

.EX
.B setsebool -P deny_ptrace 1

.EE

.PP
If you want to allow all domains to use other domains file descriptors, you must turn on the domain_fd_use boolean. Enabled by default.

.EX
.B setsebool -P domain_fd_use 1

.EE

.PP
If you want to allow all domains to have the kernel load modules, you must turn on the domain_kernel_load_modules boolean. Disabled by default.

.EX
.B setsebool -P domain_kernel_load_modules 1

.EE

.PP
If you want to allow all domains to execute in fips_mode, you must turn on the fips_mode boolean. Enabled by default.

.EX
.B setsebool -P fips_mode 1

.EE

.PP
If you want to enable reading of urandom for all domains, you must turn on the global_ssp boolean. Disabled by default.

.EX
.B setsebool -P global_ssp 1

.EE

.PP
If you want to control the ability to mmap a low area of the address space, as configured by /proc/sys/kernel/mmap_min_addr, you must turn on the mmap_low_allowed boolean. Disabled by default.

.EX
.B setsebool -P mmap_low_allowed 1

.EE

.PP
If you want to disable kernel module loading, you must turn on the secure_mode_insmod boolean. Enabled by default.

.EX
.B setsebool -P secure_mode_insmod 1

.EE

.PP
If you want to boolean to determine whether the system permits loading policy, setting enforcing mode, and changing boolean values.  Set this to true and you have to reboot to set it back, you must turn on the secure_mode_policyload boolean. Enabled by default.

.EX
.B setsebool -P secure_mode_policyload 1

.EE

.PP
If you want to allow unconfined executables to make their heap memory executable.  Doing this is a really bad idea. Probably indicates a badly coded executable, but could indicate an attack. This executable should be reported in bugzilla, you must turn on the selinuxuser_execheap boolean. Disabled by default.

.EX
.B setsebool -P selinuxuser_execheap 1

.EE

.PP
If you want to allow all unconfined executables to use libraries requiring text relocation that are not labeled textrel_shlib_t, you must turn on the selinuxuser_execmod boolean. Enabled by default.

.EX
.B setsebool -P selinuxuser_execmod 1

.EE

.PP
If you want to allow unconfined executables to make their stack executable.  This should never, ever be necessary. Probably indicates a badly coded executable, but could indicate an attack. This executable should be reported in bugzilla, you must turn on the selinuxuser_execstack boolean. Enabled by default.

.EX
.B setsebool -P selinuxuser_execstack 1

.EE

.PP
If you want to support X userspace object manager, you must turn on the xserver_object_manager boolean. Enabled by default.

.EX
.B setsebool -P xserver_object_manager 1

.EE

.SH "MANAGED FILES"

The SELinux process type anaconda_t can manage files labeled with the following file types.  The paths listed are the default paths for these file types.  Note the processes UID still need to have DAC permissions.

.br
.B file_type

	all files on the system
.br

.SH "COMMANDS"
.B semanage fcontext
can also be used to manipulate default file context mappings.
.PP
.B semanage permissive
can also be used to manipulate whether or not a process type is permissive.
.PP
.B semanage module
can also be used to enable/disable/install/remove policy modules.

.B semanage boolean
can also be used to manipulate the booleans

.PP
.B system-config-selinux
is a GUI tool available to customize SELinux policy settings.

.SH AUTHOR
This manual page was auto-generated using
.B "sepolicy manpage"
by Dan Walsh.

.SH "SEE ALSO"
selinux(8), anaconda(8), semanage(8), restorecon(8), chcon(1), sepolicy(8)
, setsebool(8)
import sys
import cairo
import gobject
import gtk
    
class CellRendererImage(gtk.GenericCellRenderer):

    __gproperties__ = {
        "image": (gobject.TYPE_OBJECT, "Image",
        "Image", gobject.PARAM_READWRITE),
    }

    def __init__(self):
        self.__gobject_init__()
        self.image = None

    def do_set_property(self, pspec, value):
        setattr(self, pspec.name, value)

    def do_get_property(self, pspec):
        return getattr(self, pspec.name)
 
    def func(self, model, path, iter, (image, tree)):
        if model.get_value(iter, 0) == image:
            self.redraw = 1
            cell_area = tree.get_cell_area(path, tree.get_column(0))
            tree.queue_draw_area(cell_area.x, cell_area.y, cell_area.width, \

                cell_area.height)

    def animation_timeout(self, tree, image):
        if image.get_storage_type() == gtk.IMAGE_ANIMATION:
            self.redraw = 0
            image.get_data('iter').advance()
            model = tree.get_model()
            model.foreach(self.func, (image, tree))
            if self.redraw:
                gobject.timeout_add(image.get_data('iter').get_delay_time(), \
                  self.animation_timeout, tree, image)
            else:
                image.set_data('iter', None)

    def on_render(self, window, widget, background_area,cell_area, \
        expose_area, flags):
        if not self.image:
            return
        pix_rect = gtk.gdk.Rectangle()
        pix_rect.x, pix_rect.y, pix_rect.width, pix_rect.height = \
           self.on_get_size(widget, cell_area)

        pix_rect.x += cell_area.x
        pix_rect.y += cell_area.y
        pix_rect.width  -= 2 * self.get_property("xpad")
        pix_rect.height -= 2 * self.get_property("ypad")

        draw_rect = cell_area.intersect(pix_rect)
        draw_rect = expose_area.intersect(draw_rect)

        if self.image.get_storage_type() == gtk.IMAGE_ANIMATION:
  
            if not self.image.get_data('iter'):
                animation = self.image.get_animation()
                self.image.set_data('iter', animation.get_iter())
                gobject.timeout_add(self.image.get_data('iter').get_delay_time(), \
                   self.animation_timeout, widget, self.image)

            pix = self.image.get_data('iter').get_pixbuf()
        elif self.image.get_storage_type() == gtk.IMAGE_PIXBUF:
            pix = self.image.get_pixbuf()
        else:
            return
        window.draw_pixbuf(widget.style.black_gc, pix, \
         draw_rect.x-pix_rect.x, draw_rect.y-pix_rect.y, draw_rect.x, \
         draw_rect.y+2, draw_rect.width, draw_rect.height, \
         gtk.gdk.RGB_DITHER_NONE, 0, 0)

    def on_get_size(self, widget, cell_area):
        if not self.image:
            return 0, 0, 0, 0
        if self.image.get_storage_type() == gtk.IMAGE_ANIMATION:
            animation = self.image.get_animation()
            pix = animation.get_iter().get_pixbuf()
        elif self.image.get_storage_type() == gtk.IMAGE_PIXBUF:
            pix = self.image.get_pixbuf()
        else:
            return 0, 0, 0, 0
        pixbuf_width  = pix.get_width()
        pixbuf_height = pix.get_height()
        calc_width  = self.get_property("xpad") * 2 + pixbuf_width
        calc_height = self.get_property("ypad") * 2 + pixbuf_height
        x_offset = 0
        y_offset = 0
        if cell_area and pixbuf_width > 0 and pixbuf_height > 0:
            x_offset = self.get_property("xalign") * (cell_area.width - \
            calc_width -  self.get_property("xpad"))
            y_offset = self.get_property("yalign") * (cell_area.height - \
            calc_height -  self.get_property("ypad"))
        return x_offset, y_offset, calc_width, calc_height



class TutorialTextEditor:

    def on_window_destroy(self, widget, data=None):
        gtk.main_quit()

    def on_show_me_clicked(self, widget):
        pass
     
    def __init__(self):
    
        builder = gtk.Builder()
        builder.add_from_file("/usr/share/setroubleshoot/gui/browser.glade") 
        
        self.window = builder.get_object("window1")
        self.treeview = builder.get_object("treeview1")
        self.expander = builder.get_object("expander1")
        self.fix_button = builder.get_object("fix_button")
        self.expander.set_expanded(True)
        self.window.set_size_request(800, 600)
        column = gtk.TreeViewColumn("Severity", gtk.CellRendererPixbuf(), pixbuf=0)
        #column.set_resizable(True)
        self.treeview.append_column(column)
        column = gtk.TreeViewColumn("Likelihood", gtk.CellRendererText(), text=1)
        self.treeview.append_column(column)
        column = gtk.TreeViewColumn("If...", gtk.CellRendererText(), text=2)
        self.treeview.append_column(column)
        column = gtk.TreeViewColumn("Then...", gtk.CellRendererText(), text=3)
        self.treeview.append_column(column)
        cel = gtk.CellRendererText()
        cel.set_property("width-chars", 22)
        cel.set_property("wrap-width", 150)
        cel.set_property("wrap-mode", gtk.WRAP_WORD)
        
        column = gtk.TreeViewColumn("Do This...", cel, text=4)
        self.treeview.append_column(column)

        draw = gtk.Image()
        pixmap = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, 30, 30)
        pixmap.fill(0xffff0000)
        draw.set_from_pixbuf(pixmap)

                
        self.liststore = gtk.ListStore(gtk.gdk.Pixbuf, str, str, str, str)
        self.liststore.clear()

        
        self.liststore.append([draw.get_pixbuf(), '80%', 'smbd should have access to /bin/bash', '/bin/bash is mislabeled', 'change the label of the directory to samba_share_t'])
        self.liststore.append([draw.get_pixbuf(), '80%', 'smbd should have access to /bin/bash', '/bin/bash is mislabeled', 'change the label of the directory to samba_share_t'])
        self.treeview.set_model(self.liststore)

        draw.show()

        for row in self.liststore:
            print row[0]

        builder.connect_signals(self)       
    
if __name__ == "__main__":
    gobject.type_register(CellRendererImage)

    editor = TutorialTextEditor()
    editor.window.show()
    gtk.main()


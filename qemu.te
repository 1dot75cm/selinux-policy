policy_module(qemu, 1.7.4)

########################################
#
# Declarations
#

## <desc>
##	<p>
##	Determine whether qemu has full
##	access to the network.
##	</p>
## </desc>
gen_tunable(qemu_full_network, false)

attribute_role qemu_roles;
roleattribute system_r qemu_roles;

<<<<<<< HEAD
virt_domain_template(qemu)
role system_r types qemu_t;
=======
type qemu_exec_t;
application_executable_file(qemu_exec_t)

virt_domain_template(qemu)
role qemu_roles types qemu_t;
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a

########################################
#
# Local policy
#

<<<<<<< HEAD
storage_raw_write_removable_device(qemu_t)
storage_raw_read_removable_device(qemu_t)

userdom_search_user_home_content(qemu_t)
userdom_read_user_tmpfs_files(qemu_t)
userdom_stream_connect(qemu_t)

=======
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a
tunable_policy(`qemu_full_network',`
	corenet_udp_sendrecv_generic_if(qemu_t)
	corenet_udp_sendrecv_generic_node(qemu_t)
	corenet_udp_sendrecv_all_ports(qemu_t)
	corenet_udp_bind_generic_node(qemu_t)
	corenet_udp_bind_all_ports(qemu_t)
	corenet_tcp_bind_all_ports(qemu_t)
	corenet_tcp_connect_all_ports(qemu_t)
')

<<<<<<< HEAD
tunable_policy(`qemu_use_cifs',`
	fs_manage_cifs_dirs(qemu_t)
	fs_manage_cifs_files(qemu_t)
')

tunable_policy(`qemu_use_comm',`
	term_use_unallocated_ttys(qemu_t)
	dev_rw_printer(qemu_t)
')

tunable_policy(`qemu_use_nfs',`
	fs_manage_nfs_dirs(qemu_t)
	fs_manage_nfs_files(qemu_t)
')

tunable_policy(`qemu_use_usb',`
	dev_rw_usbfs(qemu_t)
	fs_manage_dos_dirs(qemu_t)
	fs_manage_dos_files(qemu_t)
')

optional_policy(`
	dbus_read_lib_files(qemu_t)
')

optional_policy(`
	pulseaudio_manage_home_files(qemu_t)
	pulseaudio_stream_connect(qemu_t)
')

optional_policy(`
	tunable_policy(`qemu_use_cifs',`
		samba_domtrans_smbd(qemu_t)
	')
')

optional_policy(`
	virt_domtrans_bridgehelper(qemu_t)
')

optional_policy(`
	virt_manage_home_files(qemu_t)
	virt_manage_images(qemu_t)
	virt_append_log(qemu_t)
')

optional_policy(`
	xen_rw_image_files(qemu_t)
')

=======
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a
optional_policy(`
	xserver_user_x_domain_template(qemu, qemu_t, qemu_tmpfs_t)
')
<<<<<<< HEAD
=======

########################################
#
# Unconfined local policy
#

optional_policy(`
	type unconfined_qemu_t;
	typealias unconfined_qemu_t alias qemu_unconfined_t;
	application_type(unconfined_qemu_t)
	unconfined_domain(unconfined_qemu_t)

	allow unconfined_qemu_t self:process { execstack execmem };
	allow unconfined_qemu_t qemu_exec_t:file execmod;
')
>>>>>>> 662a00bca8f52af8056f41abd0fdec77ea835b2a

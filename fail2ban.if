## <summary>Update firewall filtering to ban IP addresses with too many password failures.</summary>

########################################
## <summary>
##	Execute a domain transition to run fail2ban.
## </summary>
## <param name="domain">
<<<<<<< HEAD
##	<summary>
##	Domain allowed to transition.
##	</summary>
=======
## <summary>
##	Domain allowed to transition.
## </summary>
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
## </param>
#
interface(`fail2ban_domtrans',`
	gen_require(`
		type fail2ban_t, fail2ban_exec_t;
	')

	domtrans_pattern($1, fail2ban_exec_t, fail2ban_t)
')

#####################################
## <summary>
##	Connect to fail2ban over a unix domain
##	stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fail2ban_stream_connect',`
	gen_require(`
		type fail2ban_t, fail2ban_var_run_t;
	')

	files_search_pids($1)
	stream_connect_pattern($1, fail2ban_var_run_t, fail2ban_var_run_t, fail2ban_t)
')

########################################
## <summary>
<<<<<<< HEAD
##	Read and write inherited temporary files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fail2ban_rw_inherited_tmp_files',`
	gen_require(`
		type fail2ban_tmp_t;
	')

	files_search_tmp($1)
	allow $1 fail2ban_tmp_t:file rw_inherited_file_perms;
')

########################################
## <summary>
##	Read and write to an fail2ba unix stream socket.
=======
##	Read and write to an fail2ban unix stream socket.
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fail2ban_rw_stream_sockets',`
	gen_require(`
		type fail2ban_t;
	')

	allow $1 fail2ban_t:unix_stream_socket rw_stream_socket_perms;
')

########################################
## <summary>
##	Read fail2ban lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fail2ban_read_lib_files',`
	gen_require(`
		type fail2ban_var_lib_t;
	')

	files_search_var_lib($1)
<<<<<<< HEAD
	read_files_pattern($1, fail2ban_var_lib_t, fail2ban_var_lib_t)
=======
	allow $1 fail2ban_var_lib_t:file read_file_perms;
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
')

########################################
## <summary>
##	Allow the specified domain to read fail2ban's log files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`fail2ban_read_log',`
	gen_require(`
		type fail2ban_log_t;
	')

	logging_search_logs($1)
	allow $1 fail2ban_log_t:dir list_dir_perms;
	allow $1 fail2ban_log_t:file read_file_perms;
')

########################################
## <summary>
##	Allow the specified domain to append
##	fail2ban log files.
## </summary>
## <param name="domain">
<<<<<<< HEAD
##	<summary>
##	Domain allowed access.
##	</summary>
=======
## 	<summary>
##	Domain allowed access.
## 	</summary>
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
## </param>
#
interface(`fail2ban_append_log',`
	gen_require(`
		type fail2ban_log_t;
	')

	logging_search_logs($1)
	allow $1 fail2ban_log_t:dir list_dir_perms;
	allow $1 fail2ban_log_t:file append_file_perms;
')

########################################
## <summary>
##	Read fail2ban PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`fail2ban_read_pid_files',`
	gen_require(`
		type fail2ban_var_run_t;
	')

	files_search_pids($1)
	allow $1 fail2ban_var_run_t:file read_file_perms;
')

########################################
## <summary>
<<<<<<< HEAD
##	dontaudit read and write an leaked file descriptors
## </summary>
## <param name="domain">
##	<summary>
##	Domain to not audit.
##	</summary>
## </param>
#
interface(`fail2ban_dontaudit_leaks',`
	gen_require(`
		type fail2ban_t;
	')

 	dontaudit $1 fail2ban_t:tcp_socket { read write };
	dontaudit $1 fail2ban_t:unix_dgram_socket { read write };
	dontaudit $1 fail2ban_t:unix_stream_socket { read write };
')

########################################
## <summary>
=======
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
##	All of the rules required to administrate 
##	an fail2ban environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	The role to be allowed to manage the fail2ban domain.
##	</summary>
## </param>
## <rolecap/>
#
interface(`fail2ban_admin',`
	gen_require(`
<<<<<<< HEAD
		type fail2ban_t, fail2ban_log_t, fail2ban_initrc_exec_t;
		type fail2ban_var_run_t, fail2ban_var_lib_t, fail2ban_tmp_t;
		type fail2ban_client_t;
	')

	allow $1 { fail2ban_t fail2ban_client_t }:process signal_perms;
	ps_process_pattern($1, { fail2ban_t fail2ban_client_t })
	tunable_policy(`deny_ptrace',`',`
		allow $1 { fail2ban_t fail2ban_client_t }:process ptrace;
	')
=======
		type fail2ban_t, fail2ban_log_t;
		type fail2ban_var_run_t, fail2ban_initrc_exec_t;
	')

	allow $1 fail2ban_t:process { ptrace signal_perms };
	ps_process_pattern($1, fail2ban_t)
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4

	init_labeled_script_domtrans($1, fail2ban_initrc_exec_t)
	domain_system_change_exemption($1)
	role_transition $2 fail2ban_initrc_exec_t system_r;
	allow $2 system_r;

	logging_list_logs($1)
	admin_pattern($1, fail2ban_log_t)

	files_list_pids($1)
	admin_pattern($1, fail2ban_var_run_t)
<<<<<<< HEAD

	files_list_var_lib($1)
	admin_pattern($1, fail2ban_var_lib_t)

	files_list_tmp($1)
	admin_pattern($1, fail2ban_tmp_t)
=======
>>>>>>> 9f8a6a356b99a19e09256fc37630cd6c22da66b4
')
